apiVersion: kubeflow.org/v1alpha2
kind: MPIJob
metadata:
  name: resnet50v1-5-fp32-training # {"$openapi":"MODEL_NAME"}
spec:
  slotsPerWorker: 1
  cleanPodPolicy: Running
  mpiReplicaSpecs:
    Launcher:
      replicas: 1
      template:
        spec:
          serviceAccountName: resnet50v1-5-fp32-training
          containers:
          - name: mpi-launcher
            imagePullPolicy: IfNotPresent
            workingDir: /workspace/resnet50v1-5-fp32-training # {"$openapi":"MODEL_DIR"}
            image: docker.io/intel/image-recognition:tf-latest-resnet50v1-5-fp32-training # {"$openapi":"IMAGE"}
            securityContext:
              runAsUser: 0 # {"$openapi":"USER_ID"}
              runAsGroup: 0 # {"$openapi":"GROUP_ID"}
              fsGroup: 0 # {"$openapi":"FS_ID"}
            envFrom:
            - configMapRef:
                name: resnet50v1-5-fp32-training # {"$openapi":"MODEL_NAME"}
            command:
            - mpirun
            args:
            - --allow-run-as-root
            - -np
            - "2"
            - -x
            - PYTHONPATH
            - -x
            - LD_LIBRARY_PATH
            - -mca
            - pml
            - ob1
            - -mca
            - btl
            - ^openib
            - -mca
            - btl_tcp_if_exclude
            - lo,docker0
            - -bind-to
            - none
            - -map-by
            - slot
            - -output-filename
            - $(OUTPUT_DIR)
            - python3
            - /workspace/resnet50v1-5-fp32-training/models/image_recognition/tensorflow/resnet50v1_5/training/mlperf_resnet/imagenet_main.py # {"$openapi":"MODEL_SCRIPT"}
            - "2"
            - --batch_size
            - "128"
            - --max_train_steps
            - "5"
            - --train_epochs
            - "1"
            - --epochs_between_evals
            - "1"
            - --inter_op_parallelism_threads
            - "2"
            - --intra_op_parallelism_threads
            - "22"
            - --version
            - "1"
            - --resnet_size
            - "50"
            - --data_dir=$(DATASET_DIR)
            volumeMounts:
            - name: datasets
              mountPath: /datasets # {"$openapi":"DATASET_DIR"}
              readOnly: true
            - name: pvc-path
              mountPath: /pvc # {"$openapi":"PVC_PATH"}
          volumes:
          - name: datasets
            hostPath:
              path: /datasets # {"$openapi":"DATASET_DIR"}
          - name: pvc-path
            persistentVolumeClaim:
              claimName: workdisk # {"$openapi":"PVC_NAME"}
    Worker:
      replicas: 2 # {"$openapi":"WORKERS"}
      template:
        spec:
          serviceAccountName: resnet50v1-5-fp32-training
          containers:
          - name: mpi-worker
            imagePullPolicy: IfNotPresent
            workingDir: /workspace/resnet50v1-5-fp32-training # {"$openapi":"MODEL_DIR"}
            image: docker.io/intel/image-recognition:tf-latest-resnet50v1-5-fp32-training # {"$openapi":"IMAGE"}
            securityContext:
              runAsUser: 0 # {"$openapi":"USER_ID"}
              runAsGroup: 0 # {"$openapi":"GROUP_ID"}
              fsGroup: 0 # {"$openapi":"FS_ID"}
            envFrom:
            - configMapRef:
                name: resnet50v1-5-fp32-training # {"$openapi":"MODEL_NAME"}
            volumeMounts:
            - name: datasets
              mountPath: /datasets # {"$openapi":"DATASET_DIR"}
              readOnly: true
            - name: pvc-path
              mountPath: /pvc # {"$openapi":"PVC_PATH"}
          volumes:
          - name: datasets
            hostPath:
              path: /datasets # {"$openapi":"DATASET_DIR"}
          - name: pvc-path
            persistentVolumeClaim:
              claimName: workdisk # {"$openapi":"PVC_NAME"}
