apiVersion: kubeflow.org/v1alpha2
kind: MPIJob
metadata:
  name: bert-large-fp32-training # {"$openapi":"MODEL_NAME"}
spec:
  slotsPerWorker: 1
  cleanPodPolicy: Running
  mpiReplicaSpecs:
    Launcher:
      replicas: 1
      template:
        spec:
          serviceAccountName: bert-large-fp32-training # {"$openapi":"MODEL_NAME"}
          containers:
          - name: mpi-launcher
            imagePullPolicy: IfNotPresent
            workingDir: /workspace/bert-large-fp32-training # {"$openapi":"MODEL_DIR"}
            image: docker.io/intel/language-modeling:tf-latest-bert-large-fp32-training # {"$openapi":"IMAGE"}
            securityContext:
              runAsUser: 0 # {"$openapi":"USER_ID"}
              runAsGroup: 0 # {"$openapi":"GROUP_ID"}
              fsGroup: 0 # {"$openapi":"FS_ID"}
            envFrom:
            - configMapRef:
                name: bert-large-fp32-training # {"$openapi":"MODEL_NAME"}
            command:
            - mpirun
            args:
            - --allow-run-as-root
            - -np
            - "2"
            - -x
            - PYTHONPATH
            - -x
            - LD_LIBRARY_PATH
            - -mca
            - pml
            - ob1
            - -mca
            - btl
            - ^openib
            - -mca
            - btl_tcp_if_exclude
            - lo,docker0
            - -bind-to
            - none
            - -map-by
            - slot
            - python3
            - /workspace/bert-large-fp32-training/models/language_modeling/tensorflow/bert_large/training/fp32/run_classifier.py # {"$openapi":"MODEL_SCRIPT"}
            - --task_name=MRPC
            - --do_train=true
            - --do_eval=true
            - --data_dir=$(DATASET_DIR)/$(GLUE_DIR)/MRPC
            - --vocab_file=$(DATASET_DIR)/$(BERT_BASE_DIR)/vocab.txt
            - --bert_config_file=$(DATASET_DIR)/$(BERT_BASE_DIR)/bert_config.json
            - --init_checkpoint=$(DATASET_DIR)/$(BERT_BASE_DIR)/bert_model.ckpt
            - --max_seq_length=128
            - --train_batch_size=32
            - --learning_rate=2e-5
            - --num_train_epochs=3.0
            - --output_dir=$(OUTPUT_DIR)
            - --use_tpu=False
            - --precision=fp32
            - --do_lower_case=True
            volumeMounts:
            - name: datasets
              mountPath: /datasets # {"$openapi":"DATASET_DIR"}
              readOnly: true
            - name: nfs-path
              mountPath: /nfs # {"$openapi":"NFS_PATH"}
          volumes:
          - name: datasets
            hostPath:
              path: /datasets # {"$openapi":"DATASET_DIR"}
          - name: nfs-path
            nfs:
              server: 0.0.0.0 # {"$openapi":"NFS_SERVER"}
              path: /nfs # {"$openapi":"NFS_PATH"}
    Worker:
      replicas: 2 # {"$openapi":"WORKERS"}
      template:
        spec:
          serviceAccountName: bert-large-fp32-training # {"$openapi":"MODEL_NAME"}
          containers:
          - name: mpi-worker
            imagePullPolicy: IfNotPresent
            workingDir: /workspace/bert-large-fp32-training # {"$openapi":"MODEL_DIR"}
            image: docker.io/intel/language-modeling:tf-latest-bert-large-fp32-training # {"$openapi":"IMAGE"}
            securityContext:
              runAsUser: 0 # {"$openapi":"USER_ID"}
              runAsGroup: 0 # {"$openapi":"GROUP_ID"}
              fsGroup: 0 # {"$openapi":"FS_ID"}
            envFrom:
            - configMapRef:
                name: bert-large-fp32-training # {"$openapi":"MODEL_NAME"}
            volumeMounts:
            - name: datasets
              mountPath: /datasets # {"$openapi":"DATASET_DIR"}
              readOnly: true
            - name: nfs-path
              mountPath: /nfs # {"$openapi":"NFS_PATH"}
          volumes:
          - name: datasets
            hostPath:
              path: /datasets # {"$openapi":"DATASET_DIR"}
          - name: nfs-path
            nfs:
              server: 0.0.0.0 # {"$openapi":"NFS_SERVER"}
              path: /nfs # {"$openapi":"NFS_PATH"}
