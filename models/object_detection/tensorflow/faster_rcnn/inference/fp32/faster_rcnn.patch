diff --git a/research/object_detection/inference/detection_inference.py b/research/object_detection/inference/detection_inference.py
index dc66686f..ccd8b3ae 100644
--- a/research/object_detection/inference/detection_inference.py
+++ b/research/object_detection/inference/detection_inference.py
@@ -65,7 +65,7 @@ def build_inference_graph(image_tensor, inference_graph_path):
     detected_labels_tensor: Detected labels. Int64 tensor,
         shape=[num_detections]
   """
-  with tf.gfile.Open(inference_graph_path, 'r') as graph_def_file:
+  with tf.gfile.Open(inference_graph_path, 'rb') as graph_def_file:
     graph_content = graph_def_file.read()
   graph_def = tf.GraphDef()
   graph_def.MergeFromString(graph_content)
diff --git a/research/object_detection/metrics/offline_eval_map_corloc.py b/research/object_detection/metrics/offline_eval_map_corloc.py
old mode 100644
new mode 100755
index b5514be1..b498ddab
--- a/research/object_detection/metrics/offline_eval_map_corloc.py
+++ b/research/object_detection/metrics/offline_eval_map_corloc.py
@@ -88,11 +88,11 @@ def read_data_and_evaluate(input_config, eval_config):
   Raises:
     ValueError: if input_reader type is not supported or metric type is unknown.
   """
-  if input_config.WhichOneof('input_reader') == 'tf_record_input_reader':
-    input_paths = input_config.tf_record_input_reader.input_path
+  if input_config[0].WhichOneof('input_reader') == 'tf_record_input_reader':
+    input_paths = input_config[0].tf_record_input_reader.input_path
 
     categories = label_map_util.create_categories_from_labelmap(
-        input_config.label_map_path)
+        input_config[0].label_map_path)
 
     object_detection_evaluators = evaluator.get_evaluators(
         eval_config, categories)
@@ -159,7 +159,7 @@ def main(argv):
       eval_config_path=FLAGS.eval_config_path)
 
   eval_config = configs['eval_config']
-  input_config = configs['eval_input_config']
+  input_config = configs['eval_input_configs']
 
   metrics = read_data_and_evaluate(input_config, eval_config)
 
diff --git a/research/object_detection/metrics/tf_example_parser.py b/research/object_detection/metrics/tf_example_parser.py
index 9a5f130f..fa361bf5 100644
--- a/research/object_detection/metrics/tf_example_parser.py
+++ b/research/object_detection/metrics/tf_example_parser.py
@@ -44,7 +44,7 @@ class StringParser(data_parser.DataToNumpyParser):
     self.field_name = field_name
 
   def parse(self, tf_example):
-    return "".join(tf_example.features.feature[self.field_name]
+    return b"".join(tf_example.features.feature[self.field_name]
                    .bytes_list.value) if tf_example.features.feature[
                        self.field_name].HasField("bytes_list") else None
 
diff --git a/research/object_detection/utils/object_detection_evaluation.py b/research/object_detection/utils/object_detection_evaluation.py
index d65c69fb..2b36de4b 100644
--- a/research/object_detection/utils/object_detection_evaluation.py
+++ b/research/object_detection/utils/object_detection_evaluation.py
@@ -304,7 +304,7 @@ class ObjectDetectionEvaluator(DetectionEvaluator):
       if idx + self._label_id_offset in category_index:
         category_name = category_index[idx + self._label_id_offset]['name']
         try:
-          category_name = unicode(category_name, 'utf-8')
+          category_name = str(category_name, 'utf-8')
         except TypeError:
           pass
         category_name = unicodedata.normalize(
